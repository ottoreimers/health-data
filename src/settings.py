"""
Django settings for src project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import logging
import os
from pathlib import Path

logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-b$e_e1qf3bq8fp4!_tiu2j-t6&ag^l64+nfa%y$%^msy24c0-j"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "localhost",
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "activities",
    "monitoring",
    "summary",
    "sleep",
    "weight",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "src.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "src/templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "src.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

GARMIN_DB_PATH = os.path.expanduser("~/HealthData/DBs/")
logger.info(f"Looking for Garmin databases in: {GARMIN_DB_PATH}")


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
    "garmin": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(GARMIN_DB_PATH, "garmin.db"),
    },
    "garmin_monitoring": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(GARMIN_DB_PATH, "garmin_monitoring.db"),
    },
    "garmin_activities": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(GARMIN_DB_PATH, "garmin_activities.db"),
    },
    "garmin_summary": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(GARMIN_DB_PATH, "garmin_summary.db"),
    },
    "summary": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(GARMIN_DB_PATH, "summary.db"),
    },
}

for db_name, db_settings in DATABASES.items():
    if db_name != "default":
        db_path = db_settings["NAME"]
        if os.path.exists(db_path):
            logger.info(f"Database file found: {db_path}")
        else:
            logger.warning(f"Database file NOT found: {db_path}")

DATABASE_ROUTERS = ["src.routers.GarminDBRouter"]


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
